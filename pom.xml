<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.onenow.hedgefund</groupId>
    <artifactId>rest-nosql</artifactId>
    <version>0.0.0-SNAPSHOT</version>
    <packaging>war</packaging>


    <!-- PROPERTIES -->
    <properties>

        <!-- THIS -->
        <this.groupId>com.onenow.hedgefund</this.groupId>
        <this.artifact>rest-nosql</this.artifact>

        <!-- VERSIONS -->
        <version.httpclient>4.5.2</version.httpclient>
        <version.joda>2.9.7</version.joda>
        <version.cors>1.3.2</version.cors>
        <version.aws-java-sdk>1.11.78</version.aws-java-sdk>
        <version.genison>0.93</version.genison>
        <version.jackson>2.7.3</version.jackson>
        <version.jersey>2.25.1</version.jersey>
        <version.jetty>6.1.10</version.jetty>
        <version.testng>6.9.6</version.testng>
        <version.maven-compiler-plugin>3.3</version.maven-compiler-plugin>
        <version.maven-shade-plugin>2.4.1</version.maven-shade-plugin>
        <version.maven-jar-plugin>2.4</version.maven-jar-plugin>
        <version.maven-assembly-plugin>2.5.5</version.maven-assembly-plugin>
        <version.docker-maven-plugin>0.3.1</version.docker-maven-plugin>
        <version.maven-deploy-plugin>2.8.1</version.maven-deploy-plugin>
        <version.nexus-staging-maven-plugin>1.1</version.nexus-staging-maven-plugin>
        <version.site-maven-plugin>0.11</version.site-maven-plugin>

        <!-- BUILD -->
        <!--https://marketplace.automic.com/details/tomcat-official-docker-image-->
        <build.source>1.7</build.source>
        <build.target>1.7</build.target>
        <build.baseImage>pablotech/hege-rest</build.baseImage>

        <!-- REPOSITORIES -->
        <git.owner>pablo-tech</git.owner>
        <github.global.server>github</github.global.server>
        <maven.staging>maven-staging</maven.staging>
        <nexus.repoURL>http://repo.hedge.guru/nexus</nexus.repoURL>

        <!-- OTHER -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    </properties>


    <!-- REPOSITORY TO PULL FROM -->
    <repositories>

        <!-- OWN -->
        <repository>
            <id>nexus</id>
            <url>${nexus.repoURL}/content/repositories/snapshots</url>
            <snapshots>
                <enabled>true</enabled>
                <updatePolicy>always</updatePolicy>
            </snapshots>
        </repository>

    </repositories>
    
    <!--dependency management for jersey-->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.glassfish.jersey</groupId>
                <artifactId>jersey-bom</artifactId>
                <version>${version.jersey}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <!-- DEPENDENCIES TO PULL -->
    <dependencies>

        <!-- OWN: RESPONSE NOSQL -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>responsenosql</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: DATABASE -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>database-nosql</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: NoSQL client -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>client-rpc-nosql</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: AWS -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>aws</artifactId>
            <version>LATEST</version>
        </dependency>
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>aws-dynamo</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: LOGGING -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>logging</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: DISCRETE -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>discrete</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- OWN: INVESTMENT -->
        <dependency>
            <groupId>${this.groupId}</groupId>
            <artifactId>investment</artifactId>
            <version>LATEST</version>
        </dependency>

        <!-- TESTING -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${version.testng}</version>
            <scope>test</scope>
        </dependency>

        <!-- AMAZON -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk</artifactId>
            <version>${version.aws-java-sdk}</version>
        </dependency>

        <!-- GOOGLE GSON TEXT/JSON/MEDIA CONVERTER -->
        <dependency>
            <groupId>com.owlike</groupId>
            <artifactId>genson</artifactId>
            <version>${version.genison}</version>
        </dependency>

        <!-- JAX-RS REST WEB SERVICES VIA JERSEY -->
        <!--jersey servlet container-->
        <!--please note this will transitively pull-->
        <!--org.glassfish.jersey.core  / jersey-server-->
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>

        <!--JAX-RS JACKSON-->
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>${version.jackson}</version>
        </dependency>

        <!--AWS JACKSON -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${version.jackson}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
            <version>${version.jackson}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>${version.jackson}</version>
        </dependency>

        <!--DYNAMODB JODA-->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>${version.joda}</version>
        </dependency>

        <!--DYNAMODB HTTP CLIENT-->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${version.httpclient}</version>
        </dependency>

        <!-- CORS filter -->
        <dependency>
            <groupId>com.thetransactioncompany</groupId>
            <artifactId>cors-filter</artifactId>
            <version>${version.cors}</version>
        </dependency>


    </dependencies>


    <!-- BUILD -->
    <build>
        <finalName>${this.artifact}</finalName>

        <plugins>

            <!--  COMPILE ALL PROJECTS -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.maven-compiler-plugin}</version>
                <configuration>
                    <compilerArgument>-proc:none</compilerArgument>
                    <source>${build.source}</source>
                    <target>${build.target}</target>
                </configuration>
            </plugin>


            <!-- DEPLOY TO LOCAL REPOSITORY-->
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
                <version>${version.maven-deploy-plugin}</version>
                <configuration>
                    <altDeploymentRepository>
                        internal.repo::default::file://${project.build.directory}/${maven.staging}
                    </altDeploymentRepository>
                </configuration>
            </plugin>


            <plugin>
                <!-- DOCKER -->
                <!-- https://github.com/spotify/docker-maven-plugin -->
                <!-- https://docs.docker.com/installation/mac/ -->
                <!-- http://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html#install_docker -->
                <!--http://blog.tutum.co/2014/12/08/deploying-a-java-application-with-docker-and-tutum/-->
                <!--https://www.wouterdanes.net/2014/04/11/continuous-integration-using-docker-maven-and-jenkins.html-->
                <!--http://trimc-devops.blogspot.com/2015/03/running-docker-applications-apache.html-->
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>${version.docker-maven-plugin}</version>
                <!-- BIND TO PHASE -->
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- CONFIGURE DOCKER FILE -->
                <!--https://docs.docker.com/engine/reference/builder/-->
                <!--https://github.com/spotify/docker-maven-plugin-->
                <configuration>
                    <imageName>${this.artifact}</imageName>
                    <!--<dockerDirectory>${project.build.directory}</dockerDirectory>-->
                    <baseImage>${build.baseImage}</baseImage>
                    <!--<maintainer>"Pablo.Bertorello@gmail.com"</maintainer>-->
                    <resources>
                        <resource>
                            <!--http://books.sonatype.com/mvnref-book/reference/resource-filtering-sect-properties.html-->
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.war</include>
                            <targetPath>/</targetPath> <!--relative to /target/docker-->
                        </resource>
                    </resources>
                    <runs>
                        <run>["env"]</run>
                        <run>rm -rf /usr/share/tomcat7/webapps/docs /usr/share/tomcat7/webapps/examples /usr/share/tomcat7/webapps/ROOT</run>
                        <run>cp /${project.build.finalName}.war /var/lib/tomcat7/webapps/ROOT.war</run>
                        <run>ls -ltr /var/lib/tomcat7/webapps/</run>
                    </runs>
                    <exposes>
                        <expose>8080</expose>
                    </exposes>
                    <cmd>["/usr/share/tomcat7/bin/startup.sh && rm -rf /usr/share/tomcat7/webapps/ROOT && tail -f /usr/share/tomcat7/logs/catalina.out", "run"]</cmd>
                </configuration>

            </plugin>


        </plugins>

    </build>


</project>
